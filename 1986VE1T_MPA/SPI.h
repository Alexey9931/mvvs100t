/*!
 \file
 \brief Заголовочный файл с описанием API для работы с SPI
*/

#ifndef __SPI_H
#define __SPI_H

#include "MDR32_Drivers.h"
#include "external_ram.h"

///ножки для SSP1
#define PORT_SSP1 MDR_PORTC
#define PIN_SSP1_SCK PORT_Pin_7
#define PIN_SSP1_RX PORT_Pin_6
#define PIN_SSP1_TX PORT_Pin_5
#define PIN_SSP1_SS PORT_Pin_8


///Структура с параметрами DMA канала SPIn
typedef struct spi_dma_params
{
	uint8_t 									dma_channel;							 ///< Выбор канала DMA для SPIn
	uint32_t 									dma_irq_counter;					 ///< Счетчик прерываний DMA
	DMA_CtrlDataInitTypeDef 	DMA_InitStructure_SPI_RX;  ///< Структура с настройками DMA в целом 
	DMA_ChannelInitTypeDef 		DMA_Channel_SPI_RX;  			 ///< Структура с настройками канала DMA
} spi_n_dma_ch_params;  

///Структура с конфигурационными параметрами SPI
typedef struct spi_config_data
{
	MDR_SSP_TypeDef* 				SSPx;            						///< Библиотечная структура с периферийными регистрами блока SPI
	spi_n_dma_ch_params 		spi_dma_ch;									///< Структура с параметрами канала DMA для SPI
	uint32_t 								RST_CLK_PCLK_SPIn;					///< Включение тактирования для SPIn
	SSP_InitTypeDef 				SPI;												///< Библиотечная структура с конфигурационными параметрами SPI
	SSP_Clock_BRG_TypeDef 	SSP_HCLKdiv;								///< Выбор делителя тактовой частоты для тактирования блока SPIn	
	int16_t 								fifo_halfword;							///< Полуслово в приемнике SPI
	uint16_t								buffer[MAX_CHANEL_NUMBER];	///< Буфер приемника SPI
} spi_n;

/*!
 *	\brief Инициализацирует выбранный  SPIn
 *	\param *SPI_struct - Выбранный SPI для инициализации
*/
void spi_init(spi_n *spi_struct);

/*!
 *	\brief Отправляет полуслово по SPIn
 *	\param *spi_struct - Выбранный SPI 
	*	\param half_word - Полуслово для отправки
*/
void spi_transmit_halfword(spi_n *spi_struct, uint16_t half_word);

/*!
 *	\brief Отправляет массив полуслов по SPIn
 *	\param *spi_struct - Выбранный SPI
 *	\param 	message - Массив для отправки
 *	\param length - Размер массива
*/
void spi_transmit_message(spi_n *spi_struct, uint16_t message[], uint32_t length);

/*!
 *	\brief Принимает полуслово по SPIn
 *	\param *spi_struct - Выбранный SPI 
*/
uint16_t spi_receive_halfword(spi_n *spi_struct);

/*!
 *	\brief Инициализирует n-ый канал DMA  на запрос от приемника SPIn
 *	\param *spi_struct - Выбранный SPI 
*/
void dma_spi_rx_init(spi_n *spi_struct);


#endif /*__SPI_H */