<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\1986VE1T_MPA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\1986VE1T_MPA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Mon Oct  2 19:30:34 2023
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; request_data &rArr; protocol_do_cmds &rArr; init_external_ram_space &rArr; strncpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[6]">MIL_STD_1553B2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MIL_STD_1553B2_IRQHandler</a><BR>
 <LI><a href="#[7]">MIL_STD_1553B1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MIL_STD_1553B1_IRQHandler</a><BR>
 <LI><a href="#[8]">USB_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">USB_IRQHandler</a><BR>
 <LI><a href="#[9]">CAN1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">CAN1_IRQHandler</a><BR>
 <LI><a href="#[a]">CAN2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">CAN2_IRQHandler</a><BR>
 <LI><a href="#[e]">SSP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SSP1_IRQHandler</a><BR>
 <LI><a href="#[f]">BUSY_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BUSY_IRQHandler</a><BR>
 <LI><a href="#[10]">ARINC429R_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ARINC429R_IRQHandler</a><BR>
 <LI><a href="#[11]">POWER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">POWER_IRQHandler</a><BR>
 <LI><a href="#[12]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[13]">TIMER4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">TIMER4_IRQHandler</a><BR>
 <LI><a href="#[14]">TIMER1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">TIMER1_IRQHandler</a><BR>
 <LI><a href="#[16]">TIMER3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">TIMER3_IRQHandler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
 <LI><a href="#[18]">ETHERNET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ETHERNET_IRQHandler</a><BR>
 <LI><a href="#[19]">SSP3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SSP3_IRQHandler</a><BR>
 <LI><a href="#[1a]">SSP2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SSP2_IRQHandler</a><BR>
 <LI><a href="#[1b]">ARINC429T1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ARINC429T1_IRQHandler</a><BR>
 <LI><a href="#[1c]">ARINC429T2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ARINC429T2_IRQHandler</a><BR>
 <LI><a href="#[1d]">ARINC429T3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ARINC429T3_IRQHandler</a><BR>
 <LI><a href="#[1e]">ARINC429T4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ARINC429T4_IRQHandler</a><BR>
 <LI><a href="#[1f]">BKP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">BKP_IRQHandler</a><BR>
 <LI><a href="#[20]">EXT_INT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">EXT_INT1_IRQHandler</a><BR>
 <LI><a href="#[21]">EXT_INT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">EXT_INT2_IRQHandler</a><BR>
 <LI><a href="#[22]">EXT_INT3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">EXT_INT3_IRQHandler</a><BR>
 <LI><a href="#[23]">EXT_INT4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">EXT_INT4_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[10]">ARINC429R_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1b]">ARINC429T1_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1c]">ARINC429T2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1d]">ARINC429T3_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1e]">ARINC429T4_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1f]">BKP_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[f]">BUSY_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[9]">CAN1_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[a]">CAN2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[b]">DMA_IRQHandler</a> from dma.o(.text.DMA_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[18]">ETHERNET_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[20]">EXT_INT1_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[21]">EXT_INT2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[22]">EXT_INT3_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[23]">EXT_INT4_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[7]">MIL_STD_1553B1_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[6]">MIL_STD_1553B2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[11]">POWER_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[e]">SSP1_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[1a]">SSP2_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[19]">SSP3_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_mdr32f1qi.o(.text.SystemInit) referenced from startup_mdr32f1qi.o(.text)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from timer.o(.text.TIMER2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[16]">TIMER3_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[13]">TIMER4_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[c]">UART1_IRQHandler</a> from uart.o(.text.UART1_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[d]">UART2_IRQHandler</a> from uart.o(.text.UART2_IRQHandler) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[8]">USB_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_mdr32f1qi.o(.text) referenced from startup_mdr32f1qi.o(RESET)
 <LI><a href="#[25]">__main</a> from __main.o(!!!main) referenced from startup_mdr32f1qi.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[af]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[32]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[27]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; request_data &rArr; protocol_do_cmds &rArr; init_external_ram_space &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[be]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[33]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MIL_STD_1553B2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MIL_STD_1553B1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>CAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BUSY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ARINC429R_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ARINC429T1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ARINC429T2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ARINC429T3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ARINC429T4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BKP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr32f1qi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_do_cmds
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[c1]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[37]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_external_ram_space
</UL>

<P><STRONG><a name="[3c]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3b]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_external_ram_space
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[34]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>CLOCK_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, clock.o(.text.CLOCK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLOCK_Init &rArr; RST_CLK_DeInit &rArr; RST_CLK_WarmDeInit &rArr; RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>DMA_Cmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr32fxqi_dma.o(.text.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
</UL>

<P><STRONG><a name="[51]"></a>DMA_CtrlDataInit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, mdr32fxqi_dma.o(.text.DMA_CtrlDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[4c]"></a>DMA_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mdr32fxqi_dma.o(.text.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_DeInit &rArr; __NVIC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_common_init
</UL>

<P><STRONG><a name="[4e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, mdr32fxqi_dma.o(.text.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>DMA_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dma.o(.text.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_IRQHandler &rArr; DMA_UART_RX_init &rArr; DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA_Init</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mdr32fxqi_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, mdr32fxqi_dma.o(.text.DMA_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
</UL>

<P><STRONG><a name="[4f]"></a>DMA_UART_RX_init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, uart.o(.text.DMA_UART_RX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_UART_RX_init &rArr; DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>DMA_common_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(.text.DMA_common_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_common_init &rArr; DMA_DeInit &rArr; __NVIC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>EBC_Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mdr32fxqi_ebc.o(.text.EBC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EBC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
</UL>

<P><STRONG><a name="[74]"></a>EBC_MemRegionInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mdr32fxqi_ebc.o(.text.EBC_MemRegionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EBC_MemRegionInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
</UL>

<P><STRONG><a name="[73]"></a>EBC_MemRegionStructInit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, mdr32fxqi_ebc.o(.text.EBC_MemRegionStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EBC_MemRegionStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
</UL>

<P><STRONG><a name="[71]"></a>EBC_StructInit</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mdr32fxqi_ebc.o(.text.EBC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EBC_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
</UL>

<P><STRONG><a name="[65]"></a>PORT_Init</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, mdr32fxqi_port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_gpio_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_gpio_config
</UL>

<P><STRONG><a name="[67]"></a>PORT_ResetBits</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mdr32fxqi_port.o(.text.PORT_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
</UL>

<P><STRONG><a name="[66]"></a>PORT_SetBits</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mdr32fxqi_port.o(.text.PORT_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[86]"></a>PORT_StructInit</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, mdr32fxqi_port.o(.text.PORT_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PORT_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_gpio_config
</UL>

<P><STRONG><a name="[97]"></a>PORT_WriteBit</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mdr32fxqi_port.o(.text.PORT_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[46]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_CPU_PLLcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[45]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_CPU_PLLconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[47]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_CPU_PLLstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[49]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_CPU_PLLuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLuse
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[48]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_CPUclkPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPUclkPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[4a]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_CPUclkSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[42]"></a>RST_CLK_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RST_CLK_DeInit &rArr; RST_CLK_WarmDeInit &rArr; RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[5a]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 596 bytes, Stack size 80 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[58]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
</UL>

<P><STRONG><a name="[43]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_HSEconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_HSEconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[44]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_HSEstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[5d]"></a>RST_CLK_HSIcmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_HSIcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_HSIcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[5c]"></a>RST_CLK_HSIstatus</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_HSIstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[57]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_PCLKcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_gpio_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_common_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[59]"></a>RST_CLK_WarmDeInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mdr32fxqi_rst_clk.o(.text.RST_CLK_WarmDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RST_CLK_WarmDeInit &rArr; RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[88]"></a>SSP_BRGInit</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, mdr32fxqi_ssp.o(.text.SSP_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSP_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[5e]"></a>SSP_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32fxqi_ssp.o(.text.SSP_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[8a]"></a>SSP_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mdr32fxqi_ssp.o(.text.SSP_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSP_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[89]"></a>SSP_Init</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mdr32fxqi_ssp.o(.text.SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[6b]"></a>SSP_SendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32fxqi_ssp.o(.text.SSP_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[87]"></a>SSP_StructInit</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, mdr32fxqi_ssp.o(.text.SSP_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSP_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[4b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, system_mdr32f1qi.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system_mdr32f1qi.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(.text.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; TIMER_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIMER_BRGInit</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, mdr32fxqi_timer.o(.text.TIMER_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[91]"></a>TIMER_ChnCCR1_Cmd</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, mdr32fxqi_timer.o(.text.TIMER_ChnCCR1_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIMER_ChnCCR1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[90]"></a>TIMER_ChnInit</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, mdr32fxqi_timer.o(.text.TIMER_ChnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_ChnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[8f]"></a>TIMER_ChnStructInit</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mdr32fxqi_timer.o(.text.TIMER_ChnStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ChnStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[5f]"></a>TIMER_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32fxqi_timer.o(.text.TIMER_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>TIMER_Cmd</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, mdr32fxqi_timer.o(.text.TIMER_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[8c]"></a>TIMER_CntInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mdr32fxqi_timer.o(.text.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[8b]"></a>TIMER_CntStructInit</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mdr32fxqi_timer.o(.text.TIMER_CntStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_CntStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[6e]"></a>TIMER_GetCounter</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, mdr32fxqi_timer.o(.text.TIMER_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[93]"></a>TIMER_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mdr32fxqi_timer.o(.text.TIMER_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[6d]"></a>TIMER_SetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mdr32fxqi_timer.o(.text.TIMER_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[c]"></a>UART1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_IRQHandler &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_IRQHandler &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f1qi.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>UART_BRGInit</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, mdr32fxqi_uart.o(.text.UART_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[62]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32fxqi_uart.o(.text.UART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>UART_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32fxqi_uart.o(.text.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[53]"></a>UART_DMACmd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, mdr32fxqi_uart.o(.text.UART_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
</UL>

<P><STRONG><a name="[60]"></a>UART_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mdr32fxqi_uart.o(.text.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[99]"></a>UART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mdr32fxqi_uart.o(.text.UART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[63]"></a>UART_Init</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, mdr32fxqi_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[61]"></a>UART_ReceiveData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mdr32fxqi_uart.o(.text.UART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>UART_SendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32fxqi_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[64]"></a>adc_gpio_config</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, 1273pv19t.o(.text.adc_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = adc_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[68]"></a>adc_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, 1273pv19t.o(.text.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = adc_init &rArr; adc_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>adc_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 1273pv19t.o(.text.adc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc_reset &rArr; delay_milli &rArr; delay_micro &rArr; TIMER_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[83]"></a>crc32</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, rs422_protocol.o(.text.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[6c]"></a>delay_micro</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer.o(.text.delay_micro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_micro &rArr; TIMER_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCounter
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[6a]"></a>delay_milli</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(.text.delay_milli))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_milli &rArr; delay_micro &rArr; TIMER_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[6f]"></a>ebc_gpio_config</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, ebc.o(.text.ebc_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ebc_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
</UL>

<P><STRONG><a name="[70]"></a>ebc_init</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, ebc.o(.text.ebc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ebc_init &rArr; ebc_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_MemRegionInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_MemRegionStructInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBC_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_gpio_config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>error_handler</STRONG> (Thumb, 760 bytes, Stack size 40 bytes, rs422_protocol.o(.text.error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[76]"></a>fill_crc32_table</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rs422_protocol.o(.text.fill_crc32_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fill_crc32_table
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_external_ram_space
</UL>

<P><STRONG><a name="[75]"></a>init_external_ram_space</STRONG> (Thumb, 1108 bytes, Stack size 152 bytes, external_ram.o(.text.init_external_ram_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = init_external_ram_space &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_crc32_table
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_do_cmds
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; request_data &rArr; protocol_do_cmds &rArr; init_external_ram_space &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_read_timeout
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_external_ram_space
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebc_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_gpio_config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_common_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7f]"></a>protocol_do_cmds</STRONG> (Thumb, 2084 bytes, Stack size 96 bytes, rs422_protocol.o(.text.protocol_do_cmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = protocol_do_cmds &rArr; init_external_ram_space &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_external_ram_space
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data
</UL>

<P><STRONG><a name="[80]"></a>receive_packet</STRONG> (Thumb, 620 bytes, Stack size 72 bytes, rs422_protocol.o(.text.receive_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = receive_packet &rArr; uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data
</UL>

<P><STRONG><a name="[7e]"></a>request_data</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(.text.request_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = request_data &rArr; protocol_do_cmds &rArr; init_external_ram_space &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_do_cmds
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>spi_gpio_config</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, spi.o(.text.spi_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spi_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[7d]"></a>spi_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spi_init &rArr; spi_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ITConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_BRGInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_StructInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>timer1_init</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, timer.o(.text.timer1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer1_init &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>timer2_init</STRONG> (Thumb, 152 bytes, Stack size 96 bytes, timer.o(.text.timer2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = timer2_init &rArr; TIMER_ChnCCR1_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnCCR1_Cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnStructInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>timer3_init</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, timer.o(.text.timer3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer3_init &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>timer_gpio_config</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timer.o(.text.timer_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>transmit_packet</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, rs422_protocol.o(.text.transmit_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = transmit_packet &rArr; uart_write &rArr; delay_micro &rArr; TIMER_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data
</UL>

<P><STRONG><a name="[96]"></a>uart_gpio_config</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, uart.o(.text.uart_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_gpio_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_WriteBit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[7c]"></a>uart_init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uart_init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>uart_read</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, uart.o(.text.uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCounter
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCounter
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[7b]"></a>uart_set_read_timeout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text.uart_set_read_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_set_read_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>uart_write</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, uart.o(.text.uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_write &rArr; delay_micro &rArr; TIMER_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_WriteBit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCounter
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCounter
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[92]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, timer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[94]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timer.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[55]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_init
</UL>

<P><STRONG><a name="[4d]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, mdr32fxqi_dma.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
